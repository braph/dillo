/** \page dw-out-of-flow Handling Elements Out Of Flow

<div style="border: 2px solid #ffff00; margin-bottom: 0.5em;
padding: 0.5em 1em; background-color: #ffffe0"><b>Info:</b>
Should be incorporated into dw::Textblock.</div>

This texts deals with both floats and absolute positions, which have
in common, that there is a distinction between generating block and
containing block (we are here using the same notation as in the
CSS&nbsp;2 specification). Consider this snippet (regarding floats):


    <ul>
      <li>Some text.</li>
      <li>
	<div style="float:right; width=50%">Some longer text, so
	  that the effect described in this passage can be
	  demonstrated.
	</div>
	Some more and longer text.</li>
      <li>Final text.</li>
    </ul>

which may be rendered like this

     - - - - - - - - - - - - - - - - - - - - - - - - - .
    |   * Some text.                                    
	* Some more and      -  - - - - - - - - - - -.|
    |     longer text.      |Some longer text, so that  
	* Final text.        the effect described     ||
    ` - - - - - - - - - - - |above in this passage can '
			     be demonstrated.         |
			    ` - - - - - - - - - - -  -  

The float (the DIV section) is defined ("generated") within the list
item, so, in CSS 2 terms, the list item is the generating block of the
float. However, as the image shows, the float is not contained by the
list item, but another block, several levels above (not shown
here). In terms of ::dw, this means that the dw::Textblock
representing the float cannot be a child of the dw::Textblock
representing the generating block, the list item, since the allocation
of a child widget must be within the allocation of the parent
widget. Instead, to each dw::Textblock, another dw::Textblock is
assigned as the containing box.

Definition of "containing block"
================================

The following definition follows the definition in the CSS 2
specification. For a given dw::Textblock, the containing block is
defined as the one dw::Textblock following these rules:

- For the toplevel widget, the containing block is itself (see
  dw::Textblock::notifySetAsTopLevel).

- Otherwise, ... TODO: Has been changed; see
  dw::Textblock::notifySetParent.

TODO: 

1. Compare this to
   <http://www.w3.org/TR/CSS2/visudet.html#containing-block-details>.
2. Handle fixed positions: in this case, the viewport is the
   containing box, but the viewport is not represented by a widget.
3. Clarify: the element out of flow must not be a dw::Textblock.


Implementation overview
=======================

Widget level
------------

The terms _generating block_ and _containing block_ have been raised
to a higher level, the one of dw::core::Widget, and are here called
_generating widget_ and _containing widget_. To represent the
distinction, the type of dw::core::Content has been split into three
parts:

- If a widget is out of flow, the generating widget keeps a reference
  with the type dw::core::Content::WIDGET_OOF_REF, while the
  containing block refers to it as dw::core::Content::WIDGET_OOF_CONT.

- For widgets within flow, dw::core::Content::WIDGET_IN_FLOW is used.

Notice that in the first case, there are two pieces of content
referring to the same widget.

An application of this distinction is iterators. TODO: more. And still
missing: DeepIterator may need the generating parent widget in some
cases.


Textblock level
---------------
Both dw::Textblock::notifySetAsTopLevel and
dw::Textblock::notifySetParent set the member
dw::Textblock::containingBlock appropriately, according to the rules
defined above.

Handling widgets out of flow is partly the task of the new class
dw::OutOfFlowMgr, which is stored by dw::Textblock::outOfFlowMgr, but
only for containing blocks. Generating blocks should refer to
_containingBlock->outOfFlowMgr_. (Perhaps dw::OutOfFlowMgr may become
independent of dw::Textblock.)

dw::Textblock::addWidget is extended, so that floats and absolutely
positioned elements can be added. Notice that not this widget, but the
containing block becomes the parent of the newly added child, if it is
out of flow. dw::Textblock::addWidget decides this by calling
dw::OutOfFlowMgr::isOutOfFlow. (See new content types above.)

dw::core::Widget::parentRef has become a new representation. Before,
it represented the line numer. Now (least signifant bit left):

    +---+---+- - - - - - - - - - -+---+
    |         line number         | 0 |
    +---+---+- - - - - - - - - - -+---+

    +---+---+- - - - - - - - -+---+---+
    |  number of left float   | 0 | 1 |
    +---+---+- - - - - - - - -+---+---+

    +---+---+- - - - - - - - -+---+---+
    |  number of right float  | 1 | 1 |
    +---+---+- - - - - - - - -+---+---+

The latter two must be changed, as soom as absolute positions are
introduced. Details are hidden by static inline methods of
dw::OutOfFlowMgr.


Interaction between generating box and containing box
=====================================================

<div style="border: 2px solid #ff0000; margin-bottom: 0.5em; padding:
0.5em 1em; background-color: #ffefe0"><b>Warning:</b> This section
documents the current state, which is not free of errors.</div>

A new widget out of flow is added to the generating block
---------------------------------------------------------
With the respective style attributes set, this is delegated to the
dw::OutOfFlowMgr of the containing block:

    ,-------------.   ,-------------.   ,-------------.   ,-------------.
    |    float    |   |    OOFM     |   | cont. block |   | gen.  block |
    `-------------'   `-------------'   `-------------'   `-------------'
           |                 |                 |                 |
    ------------------------------------------------------------>|
           |                 |                 |    addWidget    |
           |                 |                 |    (with an     |
           |                 |                 |  appr. style)   |
           |                 |                 |                 |
           |                 |<----------------------------------|
           |                 |    addWidget    |                 |

As with widgets in flow, dw::Textblock::wordWrap is called by/for the
generating block:

           |                 |                 |                 |--.
           |                 |                 |                 |  |wordWrap
           |                 |                 |                 |<-'

First, the generating block will tell the dw::OutOfFlowMgr about the
float position:

           |                 |<----------------------------------|
           |                 |  tellPosition   |                 |
           |                 |  [1]            |                 |
           |                 |                 |                 |
           |                 |---------------->|                 |
           |                 |  borderChanged  |                 |
           |                 |                 |                 |
           |                 |                 |---------------->|
           |                 |                 |  borderChanged  |
           |                 |                 |                 |
           |                 |                 |                 |--.
           |                 |                 |                 |  |queueResize
           |                 |                 |                 |<-'

After this, the line with must be calculated, with some implications:

           |                 |                 |                 |--.
           |                 |                 |                 |  |calcAvail\
           |                 |                 |                 |  |Width
           |                 |                 |                 |<-'
           |                 |                 |                 |
           |                 |                 |                 |--.
           |                 |                 |                 |  |lineLeft\
           |                 |                 |                 |  |Border [1]
           |                 |                 |                 |<-'
           |                 |                 |                 |
           |                 |<----------------------------------|
           |                 |  getLeftBorder  |                 |
           |                 |                 |                 |
           |                 |--.              |                 |
           |                 |  |ensureFloat\  |                 |
           |                 |  |Size          |                 |
           |                 |<-'              |                 |
           |                 |                 |                 |
           |<----------------|                 |                 |
           |   sizeRequest   |                 |                 |
           |    (perhaps)    |                 |                 |

"getRightBorder" in an analogue way.

[1] Here, the values of diffXToContainingBlock,
    restWidthToContainingBlock, and diffYToContainingBlock are
    used. TODO: These may not be set correctly.

The size of a float changes its size
------------------------------------
First, the standard part:

    ,-------------.   ,-------------.   ,-------------.   ,-------------.
    |    float    |   |    OOFM     |   | cont. block |   | gen.  block |
    `-------------'   `-------------'   `-------------'   `-------------'
           |                 |                 |                 |
           |--.              |                 |                 |
           |  |queueResize   |                 |                 |
           |<-'              |                 |                 |
           |                 |                 |                 |
           |---------------------------------->|                 |
           |                 | markSizeChange  |                 |

Since dw::core::Widget::parentRef indicates this child as out of flow,
this is delegated to the dw::OutOfFlowMgr:

           |                 |<----------------|                 |
           |                 |  markSizeChange |                 |
           |                 |                 |                 |
           |                 |---------------->|                 |
           |                 |  borderChanged  |                 |
           |                 |                 |                 |
           |                 |                 |---------------->|
           |                 |                 |  borderChanged  |
           |                 |                 |                 |
           |                 |                 |                 |--.
           |                 |                 |                 |  |queueResize
           |                 |                 |                 |<-'

Notice that the size of the float is not yet calculated, instead a
size request is queued (dw::OutOfFlowMgr::Float::dirty is set), which
will result in a new calculation of the size of the containing block.

Also, queueResize is called recursively here: before the call for the
float is finished, it is called for the generating block. (See \ref
dw-widget-sizes for details.)

Calculating the size
--------------------
As usually, it starts at the top of the widget tree; in this case, the
containing block is regarded:

    ,-------------.   ,-------------.   ,-------------.   ,-------------.
    |    Float    |   |    OOFM     |   | cont. block |   | gen.  block |
    `-------------'   `-------------'   `-------------'   `-------------'
           |                 |                 |                 |
    ------------------------------------------>|                 |
           |                 |   sizeRequest   |                 |
           |                 |                 |                 |
           |                 |                 |--.              |
           |                 |                 | sizeRequestImpl |
           |                 |                 |<-'              |

During rewrapping, the size of the child is requested. We omit some
steps, since nothing has changed, except that

- dw::Textblock::diffXToContainingBlock,
- dw::Textblock::restWidthToContainingBlock, and
- dw::Textblock::diffYToContainingBlock

are set for the child, before this call:

           |                 |                 |---------------->|
           |                 |                 |   sizeRequest   |
           |                 |                 |                 |
           |                 |                 |                 |--.
           |                 |                 |                 | sizeRequest\
           |                 |                 |                 | Impl
           |                 |                 |                 |<-'

It may be that the child, the generating block, has to rewrap the
lines:

           |                 |                 |                 |--.
           |                 |                 |                 | rewrap
           |                 |                 |                 |<-'
           |                 |                 |                 |
           |                 |<----------------------------------|
           |                 |  tellNoPosition |                 |
           |                 |                 |                 |
The rest is then similar to above:

           |                 |                 |                 |--.
           |                 |                 |                 | wordWrap
           |                 |                 |                 |<-'
           |                 |                 |                 |
           |                 |<----------------------------------|
           |                 |  tellPosition   |                 |
           |                 |  [1]            |                 |
           |                 |                 |                 |
           |                 |---------------->|                 |
           |                 |  borderChanged  |                 |
           |                 |                 |                 |
           |                 |                 |---------------->|
           |                 |                 |  borderChanged  |
           |                 |                 |                 |
           |                 |                 |                 |--.
           |                 |                 |                 |  |queueResize
           |                 |                 |                 |<-'
           |                 |                 |                 |
           |                 |                 |                 |--.
           |                 |                 |                 |  |calcAvail\
           |                 |                 |                 |  |Width
           |                 |                 |                 |<-'
           |                 |                 |                 |
           |                 |                 |                 |--.
           |                 |                 |                 |  |lineLeft\
           |                 |                 |                 |  |Border [1]
           |                 |                 |                 |<-'
           |                 |                 |                 |
           |                 |<----------------------------------|
           |                 |  getLeftBorder  |                 |
           |                 |                 |                 |
           |                 |--.              |                 |
           |                 |  |ensureFloat\  |                 |
           |                 |  |Size          |                 |
           |                 |<-'              |                 |
           |                 |                 |                 |
           |<----------------|                 |                 |
           |   sizeRequest   |                 |                 |
           |    (perhaps)    |                 |                 |

Notice the nested sizeRequest (containing block -- generating block --
float), but also the call of dw::core::Widget::queueResize within
dw::core::Widget::sizeRequestImpl, which is allowed, see
\ref dw-widget-sizes.

[1] Here, the values of diffXToContainingBlock,
    restWidthToContainingBlock, and diffYToContainingBlock are used.


Bugs and Things Needing Improvement
===================================

High Priority
-------------
**Segmentation fault:** Is not fully reproducable, happens randomly.

**Misplaced/missing floats, wrong widths etc.:** Best is to provide
test pages with these errors, which are as simple as possible.

**Lines with no contents:** When lines are too narrow, they should not
contain any words, as soon as there are floats at the
borders. Currently, a line contains at least one word, even if it
wider than the line. This makes sense, because lines do not get wider,
so over-wide words must be placed somewhere. However, with floats,
this changes: lines _do_ get wider below the bottom of floats.

**Collisions of floats:** Currently, only collisions with floats on
the same side are handled, but a left float must also be moved, when a
right float blocks the space, and vice versa. This will make it
neccessary to know the width; perhaps dw::Textblock::setWidth should
delegate this to dw::OutOfFlowMgr.

**Extremes:** Extremes will be implemented by
dw::OutOfFlowMgr::getExtremes, which must be considered by
dw::Textblock::getExtremesImpl, like dw::OutOfFlowMgr::getSize is used
by dw::Textblock::sizeRequestImpl. The last two poins (lines with no
contents/collisions of floats) lead to a very simple of
dw::OutOfFlowMgr::getExtremes: the result is simply the maximum of the
floats extremes. (This is at least correct for the minimal width.)

**Rewrapping (via dw::Textblock::borderChanged) sometimes does not
imply redrawing. Reproduce?

**Text in floats, which are wider because of an image, are broken at a
too narrow width:** Reproduce: test/floats2.html. After the image has
been loaded, the text "Some text in a float." should not be broken
anymore. Idea: dw::OutOfFlowMgr should call
dw::core::Widget::setWidth. (What does dw::Table do?)

**Right floats in wide page** are put on the right side of the
allocation, which is too far right, when the page does not fit into
the window. Reproduce: test/floats4.html; the box with the greek text
should make the page wider than the window. Idea for fix:
dw::OutOfFlowMgr::sizeAllocate should deal with size hints of the
containing block (dw::Textblock::setWidth should delegate this to
dw::OutOfFlowMgr), not its allocation.

Medium Priority
---------------
**Position of a text block:** Setting,
dw::Textblock::diffXToContainingBlock,
dw::Textblock::restWidthToContainingBlock, and
dw::Textblock::diffYToContainingBlock in the current way is ugly,
should be replaced by something like size hints.

**Determining the containing block:** In
dw::Textblock::notifySetAsTopLevel and dw::Textblock::notifySetParent:
should other widgets be able to be generating/containing block?

**Determining whether a widget cares about floats:** Both variants of
_mustBorderBeRegarded_, and all variants of _getTextblockForLine_:
Perhaps, there should be only one widget of this type per line.

**Implementing the attribute "clear":** ...

**Exact positions of floats:** See dw::OutOfFlowMgr::calcBorderDiff.

Low Priority
-------------
**Absolute positions:** Will be incorporated into the
dw::OutOfFlowMgr.

**Fixed elements:** Some notes about what has do be done for fixed
elements: (i) In the current design, there is only one containing
block for a given generating block. However, a given generating block
may contain an element with absolute position (or, a float),

Not a Bug (Kind of)
-------------------
**Floats too far left?** Sometimes, floats seem too far on the left
side, as in test/floats-and-absolute.html, and also in Wikipedia. This
is only due to the fact that dillo does not yet support absolute
positions, and so absolutely positioned elements are not regarded as
containing block. (Or related to *Exact positions of floats* above?)

*/